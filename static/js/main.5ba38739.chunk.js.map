{"version":3,"sources":["rainbow.png","NewColorForm.js","Color.js","ColorsList.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NewColorForm","_ref","addColor","history","useHistory","INITIAL_STATE","colorName","colorValue","_useState","useState","_useState2","Object","slicedToArray","formData","setFormData","handleChange","e","_e$target","target","name","value","objectSpread","defineProperty","handleSubmit","preventDefault","push","react_default","a","createElement","className","onSubmit","htmlFor","id","type","placeholder","onChange","onClick","Helmet","Color","colors","color","useParams","filter","colorObj","react_router_dom","to","concat","react_router","ColorsList","names","Navbar","bg","expand","Container","Brand","alt","src","Rainbow","exact","map","key","defaultColors","Routes","setColors","console","log","path","src_ColorsList_0","src_NewColorForm_0","newColor","toConsumableArray","src_Color_0","App","src_Routes","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ba38739.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rainbow.c73de907.png\";","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport './NewColorForm.css';\nimport { Helmet } from 'react-helmet';\n\nconst NewColorForm = ({ addColor }) => {\n\tlet history = useHistory();\n\n\tconst INITIAL_STATE = {\n\t\tcolorName: '',\n\t\tcolorValue: '#FFFFFF'\n\t};\n\tconst [ formData, setFormData ] = useState(INITIAL_STATE);\n\tconst handleChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetFormData((formData) => ({\n\t\t\t...formData,\n\t\t\t[name]: value\n\t\t}));\n\t};\n\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\taddColor({ ...formData });\n\t\tsetFormData(INITIAL_STATE);\n\t\thistory.push('/colors');\n\t};\n\n\treturn (\n\t\t<div className=\"Form-page\">\n\t\t\t<div className=\"Form\">\n\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t<label htmlFor=\"color\">Color Name</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"color-name\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"colorName\"\n\t\t\t\t\t\tplaceholder=\"Color Name\"\n\t\t\t\t\t\tvalue={formData.colorName}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<label htmlFor=\"\">Color Value</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"color-value\"\n\t\t\t\t\t\ttype=\"color\"\n\t\t\t\t\t\tname=\"colorValue\"\n\t\t\t\t\t\tplaceholder=\"Color Value\"\n\t\t\t\t\t\tvalue={formData.colorValue}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<button onClick={handleSubmit}>Add Color</button>\n\t\t\t\t</form>\n\t\t\t\t<Helmet>\n\t\t\t\t\t<style\n\t\t\t\t\t>{`body { background-image: url('https://www.pngmagic.com/product_images/beautiful-color-background-images-pngmagic-sm.jpg');\n\t\t\t\tbackground-repeat: no-repeat;\n\t\t\t\tbackground-size: cover; }`}</style>\n\t\t\t\t</Helmet>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default NewColorForm;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Link, useParams, Redirect } from 'react-router-dom';\nimport './Color.css';\n\nconst Color = ({ colors }) => {\n\tconst { color } = useParams();\n\ttry {\n\t\tconst theColor = colors.filter((colorObj) => colorObj.colorName === color)[0];\n\t\tconst value = theColor.colorValue;\n\n\t\treturn (\n\t\t\t<div className=\"Color-container\">\n\t\t\t\t<div className=\"Behold-color\">\n\t\t\t\t\t<h1>BEHOLD, {color}</h1>\n\t\t\t\t\t<Link to=\"/colors\">GO BACK</Link>\n\t\t\t\t</div>\n\t\t\t\t<Helmet>\n\t\t\t\t\t<style>{`body { background-color: ${value}; }`}</style>\n\t\t\t\t</Helmet>\n\t\t\t</div>\n\t\t);\n\t} catch (e) {\n\t\treturn <Redirect to=\"/colors\" />;\n\t}\n};\n\nexport default Color;\n","import React from 'react';\nimport { NavLink, Link } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Container from 'react-bootstrap/Container';\nimport Rainbow from './rainbow.png';\nimport './ColorsList.css';\nimport { Helmet } from 'react-helmet';\n\nconst ColorsList = ({ names }) => {\n\treturn (\n\t\t<div>\n\t\t\t<Navbar bg=\"light\" expand=\"lg\">\n\t\t\t\t<Container>\n\t\t\t\t\t<Navbar.Brand>\n\t\t\t\t\t\t{<img alt=\"logo\" className=\"Logo\" src={Rainbow} />} Welcome to the color factory.\n\t\t\t\t\t</Navbar.Brand>\n\t\t\t\t\t<NavLink exact to=\"/colors/new\">\n\t\t\t\t\t\tAdd a color\n\t\t\t\t\t</NavLink>\n\t\t\t\t</Container>\n\t\t\t</Navbar>\n\t\t\t<div className=\"Colors\">\n\t\t\t\t<ul className=\"Color-list\">\n\t\t\t\t\t<p>Please select a color.</p>\n\t\t\t\t\t{names.map((color) => (\n\t\t\t\t\t\t<li key={color}>\n\t\t\t\t\t\t\t<Link to={`/colors/${color}`}>{color}</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<Helmet>\n\t\t\t\t<style\n\t\t\t\t>{`body { background-image: url('https://upload.wikimedia.org/wikipedia/commons/thumb/7/77/Hue_alpha_falloff.svg/1200px-Hue_alpha_falloff.svg.png');\n\t\t\t\tbackground-repeat: no-repeat;\n\t\t\t\tbackground-size: cover; }`}</style>\n\t\t\t</Helmet>\n\t\t</div>\n\t);\n};\n\nexport default ColorsList;\n","import React, { useState } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport NewColorForm from './NewColorForm';\nimport Color from './Color';\nimport ColorsList from './ColorsList';\n\nconst defaultColors = [\n\t{ colorName: 'red', colorValue: '#FF0000' },\n\t{ colorName: 'green', colorValue: '#00FF00' },\n\t{ colorName: 'blue', colorValue: '#0000FF' }\n];\n\nconst Routes = () => {\n\tconst [ colors, setColors ] = useState(defaultColors);\n\tconst addColor = (newColor) => {\n\t\tsetColors((colors) => [ ...colors, { ...newColor } ]);\n\t};\n\tconsole.log(colors);\n\tconst names = colors.map((color) => color.colorName);\n\treturn (\n\t\t<Switch>\n\t\t\t<Route exact path=\"/colors\">\n\t\t\t\t<ColorsList names={names} />\n\t\t\t</Route>\n\t\t\t<Route exact path=\"/colors/new\">\n\t\t\t\t<NewColorForm addColor={addColor} />\n\t\t\t</Route>\n\t\t\t<Route exact path=\"/colors/:color\">\n\t\t\t\t<Color colors={colors} />\n\t\t\t</Route>\n\t\t\t<Redirect to=\"/colors\" />\n\t\t</Switch>\n\t);\n};\n\nexport default Routes;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './Routes';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<BrowserRouter>\n\t\t\t\t<Routes />\n\t\t\t</BrowserRouter>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}